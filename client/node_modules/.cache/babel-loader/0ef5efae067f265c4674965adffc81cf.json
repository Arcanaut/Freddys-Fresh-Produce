{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\n\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        if (_this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, cacheWriteBehavior) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n\n          var diffOptions = _this.getDiffOptions(options.variables);\n\n          var diff = cache.diff(diffOptions);\n\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n\n          _this.updateLastDiff(diff, diffOptions);\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n\n  return writeWithErrors;\n}","map":{"version":3,"mappings":"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","names":["equal","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","isNetworkRequestInFlight","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","cancelNotifyTimeout","info","clearTimeout","queryManager","queryId","generateQueryId","Set","has","QueryInfo","query","networkStatus","loading","variables","setVariables","lastDiff","Object","assign","document","networkError","graphQLErrors","observableQuery","setObservableQuery","lastRequestId","dirty","options","getDiffOptions","diff","updateWatch","oq","fetchPolicy","complete","updateLastDiff","returnPartialData","optimistic","canonizeResults","_a","oldDiff","result","notifyTimeout","setTimeout","notify","oqListener","listeners","delete","add","_this","getDiff","fromOptimisticTransaction","reobserve","shouldNotify","forEach","size","stopped","reset","cancel","prototype","subscriptions","unsubscribe","stopPolling","watchOptions","watcher","callback","setDiff","lastWatch","watch","lastWrite","dmCount","data","cacheWriteBehavior","errors","shouldWriteResult","errorPolicy","performTransaction","shouldWrite","writeQuery","overwrite","diffOptions","ready","error","ignoreErrors","writeWithErrors"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\core\\QueryInfo.ts"],"sourcesContent":["import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        // If this.diff came from an optimistic transaction, deliver the\n        // current cache data to the ObservableQuery, but don't perform a\n        // full reobservation, since oq.reobserve might make a network\n        // request, and we don't want to trigger network requests for\n        // optimistic updates.\n        if (this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: this.document!,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n"]},"metadata":{},"sourceType":"module"}