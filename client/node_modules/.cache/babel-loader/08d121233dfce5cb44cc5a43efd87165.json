{"ast":null,"code":"import { Trie } from '@wry/trie';\nexport { Trie as KeyTrie } from '@wry/trie';\nimport { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() {}\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n\n  Cache.prototype.get = function (key) {\n    var node = this.getNode(key);\n    return node && node.value;\n  };\n\n  Cache.prototype.getNode = function (key) {\n    var node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      var older = node.older,\n          newer = node.newer;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  };\n\n  Cache.prototype.set = function (key, value) {\n    var node = this.getNode(key);\n\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  };\n\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n\n  Cache.prototype.delete = function (key) {\n    var node = this.map.get(key);\n\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n\n    return false;\n  };\n\n  return Cache;\n}();\n\nvar parentEntrySlot = new Slot();\n\nvar _a;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar // This Array.from polyfill is restricted to working with Set<any> for now,\n// but we can improve the polyfill and add other input types, as needed. Note\n// that this fallback implementation will only be used if the host environment\n// does not support a native Array.from function. In most modern JS runtimes,\n// the toArray function exported here will be === Array.from.\ntoArray = (_a = Array.from, _a === void 0 ? function (collection) {\n  var array = [];\n  collection.forEach(function (item) {\n    return array.push(item);\n  });\n  return array;\n} : _a);\n\nfunction maybeUnsubscribe(entryOrDep) {\n  var unsubscribe = entryOrDep.unsubscribe;\n\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\n\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n\n    case 1:\n      return value[0];\n\n    case 2:\n      throw value[1];\n  }\n}\n\nfunction valueCopy(value) {\n  return value.slice(0);\n}\n\nvar Entry =\n/** @class */\nfunction () {\n  function Entry(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n\n  Entry.prototype.peek = function () {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }; // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n\n\n  Entry.prototype.recompute = function (args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  };\n\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this); // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n\n    maybeUnsubscribe(this);\n  };\n\n  Entry.prototype.dispose = function () {\n    var _this = this;\n\n    this.setDirty(); // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n\n    forgetChildren(this); // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n\n    eachParent(this, function (parent, child) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n\n  Entry.prototype.forget = function () {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  };\n\n  Entry.prototype.dependOn = function (dep) {\n    dep.add(this);\n\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n\n    this.deps.add(dep);\n  };\n\n  Entry.prototype.forgetDeps = function () {\n    var _this = this;\n\n    if (this.deps) {\n      toArray(this.deps).forEach(function (dep) {\n        return dep.delete(_this);\n      });\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  };\n\n  Entry.count = 0;\n  return Entry;\n}();\n\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n\n  if (parent) {\n    child.parents.add(parent);\n\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).\n\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true; // Set entry.value as unknown.\n\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  } // Either way, this line is always reached.\n\n\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(child, callback) {\n  var parentCount = child.parents.size;\n\n  if (parentCount) {\n    var parents = toArray(child.parents);\n\n    for (var i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n} // Let a parent Entry know that one of its children may be dirty.\n\n\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  var parentWasClean = !mightBeDirty(parent);\n\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child); // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n} // Let a parent Entry know that one of its children is no longer dirty.\n\n\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n\n  if (dc) {\n    dc.delete(child);\n\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n\n      parent.dirtyChildren = null;\n    }\n  }\n} // Removes all children from this entry and returns an array of the\n// removed children.\n\n\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n    });\n  } // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n\n\n  parent.forgetDeps(); // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  } // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n\n\n  return true;\n}\n\nvar EntryMethods = {\n  setDirty: true,\n  dispose: true,\n  forget: true\n};\n\nfunction dep(options) {\n  var depsByKey = new Map();\n  var subscribe = options && options.subscribe;\n\n  function depend(key) {\n    var parent = parentEntrySlot.getValue();\n\n    if (parent) {\n      var dep_1 = depsByKey.get(key);\n\n      if (!dep_1) {\n        depsByKey.set(key, dep_1 = new Set());\n      }\n\n      parent.dependOn(dep_1);\n\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep_1);\n        dep_1.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(key, entryMethodName) {\n    var dep = depsByKey.get(key);\n\n    if (dep) {\n      var m_1 = entryMethodName && hasOwnProperty.call(EntryMethods, entryMethodName) ? entryMethodName : \"setDirty\"; // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n\n      toArray(dep).forEach(function (entry) {\n        return entry[m_1]();\n      });\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend;\n}\n\nfunction makeDefaultMakeCacheKeyFunction() {\n  var keyTrie = new Trie(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n} // The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\n\n\nvar defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\nvar caches = new Set();\n\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var keyArgs = options.keyArgs;\n  var makeCacheKey = options.makeCacheKey || makeDefaultMakeCacheKeyFunction();\n\n  var optimistic = function () {\n    var key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n\n    var entry = cache.get(key);\n\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe; // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n\n      entry.forget = function () {\n        return cache.delete(key);\n      };\n    }\n\n    var value = entry.recompute(Array.prototype.slice.call(arguments)); // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n\n    cache.set(key, entry);\n    caches.add(cache); // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    }\n\n    return value;\n  };\n\n  Object.defineProperty(optimistic, \"size\", {\n    get: function () {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false\n  });\n\n  function dirtyKey(key) {\n    var entry = cache.get(key);\n\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n\n  optimistic.dirtyKey = dirtyKey;\n\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments));\n  };\n\n  function peekKey(key) {\n    var entry = cache.get(key);\n\n    if (entry) {\n      return entry.peek();\n    }\n  }\n\n  optimistic.peekKey = peekKey;\n\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments));\n  };\n\n  function forgetKey(key) {\n    return cache.delete(key);\n  }\n\n  optimistic.forgetKey = forgetKey;\n\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n  } : makeCacheKey;\n  return Object.freeze(optimistic);\n}\n\nexport { defaultMakeCacheKey, dep, wrap };","map":{"version":3,"mappings":"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","names":["defaultDispose","max","dispose","Map","Cache","key","map","has","node","getNode","value","get","newest","newer","older","oldest","set","size","delete","parentEntrySlot","Slot","Object","prototype","hasOwnProperty","toArray","_a","Array","collection","array","forEach","push","item","maybeUnsubscribe","entryOrDep","unsubscribe","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","fn","Set","Entry","count","mightBeDirty","rememberParent","args","recomputing","reallyRecompute","dirty","reportDirty","setDirty","forgetChildren","eachParent","parent","child","forgetChild","_this","dep","add","deps","pop","clear","getValue","parents","childValues","reportDirtyChild","reportCleanChild","entry","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","dirtyChildren","reportClean","callback","parentCount","i","parentWasClean","childValue","removeDirtyChild","dc","_value","forgetDeps","subscribe","EntryMethods","forget","options","depsByKey","depend","dep_1","dependOn","entryMethodName","m_1","call","makeDefaultMakeCacheKeyFunction","keyTrie","Trie","WeakMap","lookupArray","arguments","defaultMakeCacheKey","caches","wrap","originalFunction","create","cache","Math","pow","keyArgs","makeCacheKey","optimistic","recompute","hasValue","clean","defineProperty","configurable","enumerable","dirtyKey","peekKey","peek","forgetKey","getKey","freeze"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\optimism\\src\\cache.ts","C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\optimism\\src\\context.ts","C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\optimism\\src\\helpers.ts","C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\optimism\\src\\entry.ts","C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\optimism\\src\\dep.ts","C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\optimism\\src\\index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","export const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const {\n  // This Array.from polyfill is restricted to working with Set<any> for now,\n  // but we can improve the polyfill and add other input types, as needed. Note\n  // that this fallback implementation will only be used if the host environment\n  // does not support a native Array.from function. In most modern JS runtimes,\n  // the toArray function exported here will be === Array.from.\n  from: toArray = (collection: Set<any>) => {\n    const array: any[] = [];\n    collection.forEach(item => array.push(item));\n    return array;\n  },\n} = Array;\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, toArray, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      toArray(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = toArray(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n","import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { hasOwnProperty, Unsubscribable, maybeUnsubscribe, toArray } from \"./helpers\";\n\ntype EntryMethodName = keyof typeof EntryMethods;\nconst EntryMethods = {\n  setDirty: true, // Mark parent Entry as needing to be recomputed (default)\n  dispose: true,  // Detach parent Entry from parents and children, but leave in LRU cache\n  forget: true,   // Fully remove parent Entry from LRU cache and computation graph\n};\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey, entryMethodName?: EntryMethodName) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(\n    key: TKey,\n    entryMethodName?: EntryMethodName,\n  ) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      const m: EntryMethodName = (\n        entryMethodName &&\n        hasOwnProperty.call(EntryMethods, entryMethodName)\n      ) ? entryMethodName : \"setDirty\";\n      // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n      toArray(dep).forEach(entry => entry[m]());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n","import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\nfunction makeDefaultMakeCacheKeyFunction<\n  TKeyArgs extends any[],\n  TCacheKey = any,\n>(): (...args: TKeyArgs) => TCacheKey {\n  const keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nexport const defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs;\n  const makeCacheKey = options.makeCacheKey ||\n    makeDefaultMakeCacheKeyFunction<TKeyArgs, TCacheKey>();\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false,\n  });\n\n  function dirtyKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey;\n\n  return Object.freeze(optimistic);\n}\n"]},"metadata":{},"sourceType":"module"}