{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2, remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n\n    return null;\n  };\n\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                __DEV__ ? invariant(fragment, \"No fragment named \".concat(selection.name.value)) : invariant(fragment, 9);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2];\n            });\n          });\n        };\n\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n\n          if (!field.selectionSet) {\n            return result;\n          }\n\n          if (result == null) {\n            return result;\n          }\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n\n  return LocalState;\n}();\n\nexport { LocalState };","map":{"version":3,"mappings":"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","names":["invariant","visit","BREAK","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","_a","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","LocalState","Array","isArray","forEach","_this","resolverGroup","document","remoteResult","context","variables","_b","onlyRunForcedResolvers","resolveDocument","data","then","localResult","result","getCacheKey","obj","identify","buildRootValueFromCache","prepareContext","exportedVariables","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","operation","defaultOperationType","charAt","toUpperCase","slice","execContext","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","resolveField","fieldResult","push","fragment","__DEV__","concat","typeCondition","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolve","shouldForceResolvers","resolverType","__typename","resolverMap","withValue","directives","directive","resolveSubSelectedArray","item"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\core\\LocalState.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}