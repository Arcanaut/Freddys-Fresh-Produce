{"ast":null,"code":"/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\nexport var handleRef = function handleRef(ref, node) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error('We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.');\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && typeof ref === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    ref.current = node;\n  }\n};\n/** Checks that the passed object is a valid React ref object. */\n\nexport var isRefObject = function isRefObject(ref) {\n  return (// https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665\n    ref !== null && typeof ref === 'object' && ref.hasOwnProperty('current')\n  );\n};","map":{"version":3,"mappings":"AAaA;;;;;;AAMA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAIC,GAAJ,EAAmCC,IAAnC,EAA+C;AACtE,MAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzC,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIK,KAAJ,CACJ,iIADI,CAAN;AAGD;AACF;;AAED,MAAI,OAAOL,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,OAAG,CAACC,IAAD,CAAHD;AACA;AACD;;AAED,MAAIA,GAAG,KAAK,IAARA,IAAgB,OAAOA,GAAP,KAAe,QAAnC,EAA6C;AAC3C;AACA;AACCA,OAAD,CAAmCM,OAAlCN,GAA4CC,IAA5CD;AACF;AAlBI;AAqBP;;AACA,OAAO,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACP,GAAD;AAAA,SACzB;AACAA,OAAG,KAAK,IAARA,IAAgB,OAAOA,GAAP,KAAe,QAA/BA,IAA2CA,GAAG,CAACQ,cAAJR,CAAmB,SAAnBA;AAFlB;AAApB","names":["handleRef","ref","node","process","env","NODE_ENV","Error","current","isRefObject","hasOwnProperty"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@fluentui\\react-component-ref\\dist\\es\\utils.ts"],"sourcesContent":["import * as React from 'react';\n\nexport interface RefProps {\n  children: React.ReactElement;\n\n  /**\n   * Called when a child component will be mounted or updated.\n   *\n   * @param node - Referred node.\n   */\n  innerRef: React.Ref<HTMLElement>;\n}\n\n/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\nexport const handleRef = <N>(ref: React.Ref<N> | undefined, node: N) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error(\n        'We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.',\n      );\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && typeof ref === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    (ref as React.MutableRefObject<N>).current = node;\n  }\n};\n\n/** Checks that the passed object is a valid React ref object. */\nexport const isRefObject = (ref: any): ref is React.RefObject<any> =>\n  // https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665\n  ref !== null && typeof ref === 'object' && ref.hasOwnProperty('current');\n"]},"metadata":{},"sourceType":"module"}