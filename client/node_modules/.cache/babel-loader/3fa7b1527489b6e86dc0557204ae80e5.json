{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit } from 'graphql';\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      __DEV__ ? invariant(evaledValue !== void 0, \"Invalid variable referenced in @\".concat(directive.name.value, \" directive.\")) : invariant(evaledValue !== void 0, 37);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport function hasDirectives(names, root) {\n  return getDirectiveNames(root).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      __DEV__ ? invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\".concat(directiveName, \" directive.\")) : invariant(directiveArguments && directiveArguments.length === 1, 38);\n      var ifArgument = directiveArguments[0];\n      __DEV__ ? invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\".concat(directiveName, \" directive.\")) : invariant(ifArgument.name && ifArgument.name.value === 'if', 39);\n      var ifValue = ifArgument.value;\n      __DEV__ ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\".concat(directiveName, \" directive must be a variable or a boolean value.\")) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 40);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["invariant","visit","shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","__DEV__","concat","getDirectiveNames","root","names","Directive","node","push","hasDirectives","some","indexOf","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\utilities\\graphql\\directives.ts"],"sourcesContent":["import { invariant } from '../globals';\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n"]},"metadata":{},"sourceType":"module"}