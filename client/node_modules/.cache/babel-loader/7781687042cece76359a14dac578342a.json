{"ast":null,"code":"import * as React from 'react';\n\nvar isActionSupported = function isActionSupported(element, method) {\n  return element ? !!element[method] : false;\n};\n\nexport var useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      target = options.target,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(function () {\n    var element = typeof targetRef === 'undefined' ? target : targetRef.current; // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = window.event;\n\n    var conditionalHandler = function conditionalHandler(event) {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.');\n    }\n\n    return function () {\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAIA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,OADwB,EAExBC,MAFwB;AAAA,SAGDD,OAAO,GAAG,CAAC,CAACA,OAAO,CAACC,MAAD,CAAZ,GAAuB,KAH7B;AAA1B;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAuBC,OAAvB,EAAkE;AAAA,MACxFC,OADwF,GACzCD,OADyC,CACxFC,OADwF;AAAA,MAC/EC,QAD+E,GACzCF,OADyC,CAC/EE,QAD+E;AAAA,MACrEC,IADqE,GACzCH,OADyC,CACrEG,IADqE;AAAA,MAC/DC,MAD+D,GACzCJ,OADyC,CAC/DI,MAD+D;AAAA,MACvDC,SADuD,GACzCL,OADyC,CACvDK,SADuD;AAGhG,MAAMC,cAAc,GAAGX,KAAK,CAACY,MAANZ,CAA8BO,QAA9BP,CAAvB;AACAW,gBAAc,CAACE,OAAfF,GAAyBJ,QAAzBI;AAEA,MAAMG,YAAY,GAAGd,KAAK,CAACe,WAANf,CAAkB,UAACgB,KAAD,EAAgC;AACrE,WAAOL,cAAc,CAACE,OAAfF,CAAuBK,KAAvBL,CAAP;AADmB,KAElB,EAFkBX,CAArB;;AAIA,MAAIiB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACA;AACAjB,SAAK,CAACoB,SAANpB,CAAgB,YAAM;AACpB,UAAI,OAAOS,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,SAAP,KAAqB,WAA1D,EAAuE;AACrE,cAAM,IAAIW,KAAJ,CAAU,gFAAV,CAAN;AACD;;AAED,UAAI,OAAOZ,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,SAAP,KAAqB,WAA1D,EAAuE;AACrE,cAAM,IAAIW,KAAJ,CAAU,kFAAV,CAAN;AACD;AAPH,OAQG,CAACZ,MAAD,EAASC,SAAT,CARHV;AASD;;AAEDA,OAAK,CAACoB,SAANpB,CAAgB,YAAM;AACpB,QAAME,OAAkC,GAAG,OAAOQ,SAAP,KAAqB,WAArB,GAAmCD,MAAnC,GAA4CC,SAAS,CAACG,OAAjG,CADoB,CAGpB;AACA;AACA;;AACA,QAAIS,YAAY,GAAGC,MAAM,CAACP,KAA1B;;AAEA,QAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACR,KAAD,EAAgC;AACzD;AACA,UAAIA,KAAK,KAAKM,YAAd,EAA4B;AAC1BA,oBAAY,GAAGG,SAAfH;AACA;AACD;;AAEDR,kBAAY,CAACE,KAAD,CAAZF;AAPF;;AAUA,QAAIb,iBAAiB,CAACC,OAAD,EAAU,kBAAV,CAArB,EAAoD;AAClDA,aAAO,CAACwB,gBAARxB,CAAyBM,IAAzBN,EAA+BsB,kBAA/BtB,EAAmDI,OAAnDJ;AADF,WAEO,IAAIe,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AAChD,YAAM,IAAII,KAAJ,CACJ,0HADI,CAAN;AAGD;;AAED,WAAO,YAAM;AACX,UAAIpB,iBAAiB,CAACC,OAAD,EAAU,qBAAV,CAArB,EAAuD;AACrDA,eAAO,CAACyB,mBAARzB,CAA4BM,IAA5BN,EAAkCsB,kBAAlCtB,EAAsDI,OAAtDJ;AADF,aAEO,IAAIe,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AAChD,cAAM,IAAII,KAAJ,CACJ,6HADI,CAAN;AAGD;AAPH;AA1BF,KAmCG,CAACf,OAAD,EAAUQ,YAAV,EAAwBL,MAAxB,EAAgCC,SAAhC,EAA2CF,IAA3C,CAnCHR;AAzBK","names":["React","isActionSupported","element","method","useEventListener","options","capture","listener","type","target","targetRef","latestListener","useRef","current","eventHandler","useCallback","event","process","env","NODE_ENV","useEffect","Error","currentEvent","window","conditionalHandler","undefined","addEventListener","removeEventListener"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@fluentui\\react-component-event-listener\\dist\\es\\useEventListener.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { EventHandler, EventListenerOptions, EventTypes, Target } from './types';\n\nconst isActionSupported = (\n  element: Target | null | undefined,\n  method: 'addEventListener' | 'removeEventListener',\n): element is Target => (element ? !!element[method] : false);\n\nexport const useEventListener = <T extends EventTypes>(options: EventListenerOptions<T>): void => {\n  const { capture, listener, type, target, targetRef } = options;\n\n  const latestListener = React.useRef<EventHandler<T>>(listener);\n  latestListener.current = listener;\n\n  const eventHandler = React.useCallback((event: DocumentEventMap[T]) => {\n    return latestListener.current(event);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(() => {\n    const element: Target | null | undefined = typeof targetRef === 'undefined' ? target : targetRef.current;\n\n    // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n    let currentEvent = window.event;\n\n    const conditionalHandler = (event: DocumentEventMap[T]) => {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.',\n      );\n    }\n\n    return () => {\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.',\n        );\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};\n"]},"metadata":{},"sourceType":"module"}