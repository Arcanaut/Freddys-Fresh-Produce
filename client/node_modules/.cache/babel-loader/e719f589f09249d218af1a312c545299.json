{"ast":null,"code":"import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport function rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n\n  var addQueryParam = function (key, value) {\n    queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AAKA,OAAM,SAAUC,gBAAV,CAA2BC,SAA3B,EAA8CC,IAA9C,EAAwD;AAG5D,MAAMC,WAAW,GAAa,EAA9B;;AACA,MAAMC,aAAa,GAAG,UAACC,GAAD,EAAcC,KAAd,EAA2B;AAC/CH,eAAW,CAACI,IAAZ,CAAiB,UAAGF,GAAH,EAAM,GAAN,EAAMG,MAAN,CAAUC,kBAAkB,CAACH,KAAD,CAA5B,CAAjB;AACD,GAFD;;AAIA,MAAI,WAAWJ,IAAf,EAAqB;AACnBE,iBAAa,CAAC,OAAD,EAAUF,IAAI,CAACQ,KAAf,CAAb;AACD;;AACD,MAAIR,IAAI,CAACS,aAAT,EAAwB;AACtBP,iBAAa,CAAC,eAAD,EAAkBF,IAAI,CAACS,aAAvB,CAAb;AACD;;AACD,MAAIT,IAAI,CAACU,SAAT,EAAoB;AAClB,QAAIC,mBAAmB,SAAvB;;AACA,QAAI;AACFA,yBAAmB,GAAGd,uBAAuB,CAC3CG,IAAI,CAACU,SADsC,EAE3C,eAF2C,CAA7C;AAID,KALD,CAKE,OAAOE,UAAP,EAAmB;AACnB,aAAO;AAAEA,kBAAU;AAAZ,OAAP;AACD;;AACDV,iBAAa,CAAC,WAAD,EAAcS,mBAAd,CAAb;AACD;;AACD,MAAIX,IAAI,CAACa,UAAT,EAAqB;AACnB,QAAIC,oBAAoB,SAAxB;;AACA,QAAI;AACFA,0BAAoB,GAAGjB,uBAAuB,CAC5CG,IAAI,CAACa,UADuC,EAE5C,gBAF4C,CAA9C;AAID,KALD,CAKE,OAAOD,UAAP,EAAmB;AACnB,aAAO;AAAEA,kBAAU;AAAZ,OAAP;AACD;;AACDV,iBAAa,CAAC,YAAD,EAAeY,oBAAf,CAAb;AACD;;AAQD,MAAIC,QAAQ,GAAG,EAAf;AAAA,MACEC,WAAW,GAAGjB,SADhB;AAEA,MAAMkB,aAAa,GAAGlB,SAAS,CAACmB,OAAV,CAAkB,GAAlB,CAAtB;;AACA,MAAID,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBF,YAAQ,GAAGhB,SAAS,CAACoB,MAAV,CAAiBF,aAAjB,CAAX;AACAD,eAAW,GAAGjB,SAAS,CAACoB,MAAV,CAAiB,CAAjB,EAAoBF,aAApB,CAAd;AACD;;AACD,MAAMG,iBAAiB,GAAGJ,WAAW,CAACE,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAA9B,GAAkC,GAAlC,GAAwC,GAAlE;AACA,MAAMG,MAAM,GACVL,WAAW,GAAGI,iBAAd,GAAkCnB,WAAW,CAACqB,IAAZ,CAAiB,GAAjB,CAAlC,GAA0DP,QAD5D;AAEA,SAAO;AAAEM,UAAM;AAAR,GAAP;AACD","names":["serializeFetchParameter","rewriteURIForGET","chosenURI","body","queryParams","addQueryParam","key","value","push","concat","encodeURIComponent","query","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\link\\http\\rewriteURIForGET.ts"],"sourcesContent":["import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n"]},"metadata":{},"sourceType":"module"}