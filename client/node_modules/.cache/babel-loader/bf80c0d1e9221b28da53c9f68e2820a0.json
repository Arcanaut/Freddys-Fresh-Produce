{"ast":null,"code":"import { __extends } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonEmptyArray } from \"../utilities/index.js\";\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nvar generateErrorMessage = function (err) {\n  var message = '';\n\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    var errors = (err.graphQLErrors || []).concat(err.clientErrors || []);\n    errors.forEach(function (error) {\n      var errorMessage = error ? error.message : 'Error message not found.';\n      message += \"\".concat(errorMessage, \"\\n\");\n    });\n  }\n\n  if (err.networkError) {\n    message += \"\".concat(err.networkError.message, \"\\n\");\n  }\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        clientErrors = _a.clientErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.clientErrors = clientErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","map":{"version":3,"mappings":";AAAA,OAAO,+BAAP;AAIA,SAASA,eAAT,QAAgC,uBAAhC;AAIA,OAAM,SAAUC,aAAV,CAAwBC,GAAxB,EAAkC;AACtC,SAAOA,GAAG,CAACC,cAAJ,CAAmB,eAAnB,CAAP;AACD;;AAMD,IAAMC,oBAAoB,GAAG,UAACF,GAAD,EAAiB;AAC5C,MAAIG,OAAO,GAAG,EAAd;;AAEA,MAAIL,eAAe,CAACE,GAAG,CAACI,aAAL,CAAf,IAAsCN,eAAe,CAACE,GAAG,CAACK,YAAL,CAAzD,EAA6E;AAC3E,QAAMC,MAAM,GAAI,CAACN,GAAG,CAACI,aAAJ,IAAqB,EAAtB,EACbG,MADa,CACNP,GAAG,CAACK,YAAJ,IAAoB,EADd,CAAhB;AAEAC,UAAM,CAACE,OAAP,CAAe,UAACC,KAAD,EAAa;AAC1B,UAAMC,YAAY,GAAGD,KAAK,GACtBA,KAAK,CAACN,OADgB,GAEtB,0BAFJ;AAGAA,aAAO,IAAI,UAAGO,YAAH,EAAe,IAAf,CAAX;AACD,KALD;AAMD;;AAED,MAAIV,GAAG,CAACW,YAAR,EAAsB;AACpBR,WAAO,IAAI,UAAGH,GAAG,CAACW,YAAJ,CAAiBR,OAApB,EAA2B,IAA3B,CAAX;AACD;;AAGDA,SAAO,GAAGA,OAAO,CAACS,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACA,SAAOT,OAAP;AACD,CArBD;;AA2BA;AAAiCU;;AAc/B,uBAAYC,EAAZ,EAYC;QAXCV,aAAa;QACbC,YAAY;QACZM,YAAY;QACZD,YAAY;QACZK,SAAS;;AALX,gBAaEC,kBAAMN,YAAN,KAAmB,IAbrB;;AAcEO,SAAI,CAACb,aAAL,GAAqBA,aAAa,IAAI,EAAtC;AACAa,SAAI,CAACZ,YAAL,GAAoBA,YAAY,IAAI,EAApC;AACAY,SAAI,CAACN,YAAL,GAAoBA,YAAY,IAAI,IAApC;AACAM,SAAI,CAACd,OAAL,GAAeO,YAAY,IAAIR,oBAAoB,CAACe,KAAD,CAAnD;AACAA,SAAI,CAACF,SAAL,GAAiBA,SAAjB;AAICE,SAAY,CAACC,SAAb,GAAyBC,WAAW,CAACC,SAArC;;AACF;;AACH;AAtCA,EAAiCC,KAAjC","names":["isNonEmptyArray","isApolloError","err","hasOwnProperty","generateErrorMessage","message","graphQLErrors","clientErrors","errors","concat","forEach","error","errorMessage","networkError","replace","__extends","_a","extraInfo","_super","_this","__proto__","ApolloError","prototype","Error"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\errors\\index.ts"],"sourcesContent":["import '../utilities/globals';\n\nimport { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    const errors = ((err.graphQLErrors || []) as readonly Error[])\n      .concat(err.clientErrors || []);\n    errors.forEach((error: Error) => {\n      const errorMessage = error\n        ? error.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    clientErrors?: ReadonlyArray<Error>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}