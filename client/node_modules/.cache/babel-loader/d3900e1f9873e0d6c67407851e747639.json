{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 30);\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 31);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") + \"subscriptions and \".concat(mutations.length, \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 32);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") + \"\".concat(definitions.length, \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 33);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") + \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 34);\n}","map":{"version":3,"mappings":"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","names":["invariant","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","__DEV__","concat","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","variableDefinitions","definition","payload","verifyDocumentType","requiredOperationName"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\react\\parser\\index.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}