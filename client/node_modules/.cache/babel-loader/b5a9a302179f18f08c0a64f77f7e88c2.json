{"ast":null,"code":"import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n  __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 44);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(45);\n    }\n\n    return definition;\n  });\n  __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 46);\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 47);\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 48);\n  __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 49);\n  var fragmentDef = doc.definitions[0];\n  __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 50);\n  return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(51);\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n\n  return defaultValues;\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","valueToObjectRepresentation","checkDocument","doc","__DEV__","operations","definitions","filter","kind","map","definition","concat","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","operation","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","variable"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\utilities\\graphql\\getFromAST.ts"],"sourcesContent":["import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { valueToObjectRepresentation } from './storeUtils';\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x!.name!.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(def => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode,\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n"]},"metadata":{},"sourceType":"module"}