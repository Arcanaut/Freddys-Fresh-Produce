{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\n\nfunction lookupSpecifierInfo(spec) {\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function (from, key) {\n      return context.readField(key, from);\n    };\n\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n\n      __DEV__ ? invariant(extracted !== void 0, \"Missing field '\".concat(schemaKeyPath.join('.'), \"' while extracting keyFields from \").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n        variables = _a.variables,\n        fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n        }\n\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n\n    var toMerge = extractor(path);\n\n    if (toMerge !== void 0) {\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n\n      collected = merger.merge(collected, toMerge);\n    }\n\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths;\n}\n\nfunction extractKey(object, key) {\n  return object[key];\n}\n\nexport function extractKeyPath(object, path, extract) {\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\n\nfunction normalize(value) {\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n\n  return value;\n}","map":{"version":3,"mappings":"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","names":["invariant","argumentsObjectFromField","DeepMerger","isNonEmptyArray","isNonNullObject","hasOwn","isArray","specifierInfoCache","Object","create","lookupSpecifierInfo","spec","cacheKey","JSON","stringify","keyFieldsFnFromSpecifier","specifier","info","keyFieldsFn","object","context","extract","from","key","readField","keyObject","collectSpecifierPaths","extracted","extractKeyPath","storeObject","schemaKeyPath","call","extractKey","__DEV__","concat","typename","keyArgsFnFromSpecifier","keyArgsFn","args","_a","field","variables","fieldName","collected","firstKey","keyPath","firstChar","charAt","directives","directiveName_1","slice","d","find","name","value","directiveArgs","variableName","varKeyPath","suffix","extractor","merger","getSpecifierPaths","reduce","path","toMerge","i","length","merge","paths","paths_1","currentPath_1","forEach","s","push","p","normalize","reducer","obj","map","child","keys","sort"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\cache\\inmemory\\key-extractor.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities\";\n\nimport { hasOwn, isArray } from \"./helpers\";\nimport {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<string, {\n  paths?: string[][];\n  keyFieldsFn?: KeyFieldsFunction;\n  keyArgsFn?: KeyArgsFunction;\n}> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyFieldsFn || (info.keyFieldsFn = (\n    object,\n    context,\n  ) => {\n    const extract: typeof extractKey =\n      (from, key) => context.readField(key, from);\n\n    const keyObject = context.keyObject = collectSpecifierPaths(\n      specifier,\n      schemaKeyPath => {\n        let extracted = extractKeyPath(\n          context.storeObject,\n          schemaKeyPath,\n          // Using context.readField to extract paths from context.storeObject\n          // allows the extraction to see through Reference objects and respect\n          // custom read functions.\n          extract,\n        );\n\n        if (\n          extracted === void 0 &&\n          object !== context.storeObject &&\n          hasOwn.call(object, schemaKeyPath[0])\n        ) {\n          // If context.storeObject fails to provide a value for the requested\n          // path, fall back to the raw result object, if it has a top-level key\n          // matching the first key in the path (schemaKeyPath[0]). This allows\n          // key fields included in the written data to be saved in the cache\n          // even if they are not selected explicitly in context.selectionSet.\n          // Not being mentioned by context.selectionSet is convenient here,\n          // since it means these extra fields cannot be affected by field\n          // aliasing, which is why we can use extractKey instead of\n          // context.readField for this extraction.\n          extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n        }\n\n        invariant(\n          extracted !== void 0,\n          `Missing field '${schemaKeyPath.join('.')}' while extracting keyFields from ${\n            JSON.stringify(object)\n          }`,\n        );\n\n        return extracted;\n      },\n    );\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  });\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier: KeySpecifier): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyArgsFn || (info.keyArgsFn = (args, {\n    field,\n    variables,\n    fieldName,\n  }) => {\n    const collected = collectSpecifierPaths(specifier, keyPath => {\n      const firstKey = keyPath[0];\n      const firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          const directiveName = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          const d = field.directives.find(d => d.name.value === directiveName);\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          const directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(\n            directiveArgs,\n            // If keyPath.length === 1, this code calls extractKeyPath with an\n            // empty path, which works because it uses directiveArgs as the\n            // extracted value.\n            keyPath.slice(1),\n          );\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        const variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          const varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n\n    const suffix = JSON.stringify(collected);\n\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any,\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger;\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = info.paths = [];\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(p => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<\n  TObj extends Record<string, any>,\n  TKey extends string,\n>(object: TObj, key: TKey): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey,\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key): any {\n    return isArray(obj)\n      ? obj.map(child => reducer(child, key))\n      : obj && extract!(obj, key);\n  }, object));\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(\n      Object.keys(value).sort(),\n      path => extractKeyPath(value, path),\n    ) as T;\n  }\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}