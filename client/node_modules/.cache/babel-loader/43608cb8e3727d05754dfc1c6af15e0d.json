{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n        error = observer.error,\n        complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n    var promiseQueue = {\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n\n          var both = function () {\n            return examiner(arg);\n          };\n\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n\n            if (completed) {\n              handler.complete();\n            }\n          }, function (error) {\n            --activeCallbackCount;\n            throw error;\n          }).catch(function (caught) {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAAqC,iBAArC;AAIA,OAAM,SAAUC,QAAV,CACJC,UADI,EAEJC,KAFI,EAGJC,OAHI,EAGwC;AAE5C,SAAO,IAAIJ,UAAJ,CAAkB,oBAAQ;AACvB,YAAI,GAAsBK,QAAQ,KAAlC;AAAA,QAAMC,KAAK,GAAeD,QAAQ,MAAlC;AAAA,QAAaE,QAAQ,GAAKF,QAAQ,SAAlC;AACR,QAAIG,mBAAmB,GAAG,CAA1B;AACA,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,YAAY,GAAG;AAIjBC,UAAI,EAAJ,UAAKC,QAAL,EAAwB;AACtB,eAAO,IAAIC,OAAJ,CAAY,mBAAO;AAAI,wBAAO,CAACD,QAAQ,EAAT,CAAP;AAAmB,SAA1C,CAAP;AACD;AANgB,KAAnB;;AASA,aAASE,YAAT,CACEC,QADF,EAEEC,QAFF,EAEsC;AAEpC,UAAID,QAAJ,EAAc;AACZ,eAAO,eAAG;AACR,YAAEP,mBAAF;;AACA,cAAMS,IAAI,GAAG;AAAM,2BAAQ,CAACC,GAAD,CAAR;AAAa,WAAhC;;AACAR,sBAAY,GAAGA,YAAY,CAACC,IAAb,CAAkBM,IAAlB,EAAwBA,IAAxB,EAA8BN,IAA9B,CACb,kBAAM;AACJ,cAAEH,mBAAF;AACAW,gBAAI,IAAIA,IAAI,CAACC,IAAL,CAAUf,QAAV,EAAoBgB,MAApB,CAAR;;AACA,gBAAIZ,SAAJ,EAAe;AACba,qBAAO,CAACf,QAAR;AACD;AACF,WAPY,EAQb,iBAAK;AACH,cAAEC,mBAAF;AACA,kBAAMF,KAAN;AACD,WAXY,EAYbiB,KAZa,CAYP,kBAAM;AACZjB,iBAAK,IAAIA,KAAK,CAACc,IAAN,CAAWf,QAAX,EAAqBmB,MAArB,CAAT;AACD,WAdc,CAAf;AAeD,SAlBD;AAmBD,OApBD,MAoBO;AACL,eAAO,eAAG;AAAI,yBAAQ,IAAIR,QAAQ,CAACI,IAAT,CAAcf,QAAd,EAAwBa,GAAxB,CAAZ;AAAwC,SAAtD;AACD;AACF;;AAED,QAAMI,OAAO,GAAgB;AAC3BH,UAAI,EAAEL,YAAY,CAACX,KAAD,EAAQgB,IAAR,CADS;AAE3Bb,WAAK,EAAEQ,YAAY,CAACV,OAAD,EAAUE,KAAV,CAFQ;AAG3BC,cAAQ;AACNE,iBAAS,GAAG,IAAZ;;AACA,YAAI,CAACD,mBAAL,EAA0B;AACxBD,kBAAQ,IAAIA,QAAQ,CAACa,IAAT,CAAcf,QAAd,CAAZ;AACD;AACF;AAR0B,KAA7B;AAWA,QAAMoB,GAAG,GAAGvB,UAAU,CAACwB,SAAX,CAAqBJ,OAArB,CAAZ;AACA,WAAO;AAAM,gBAAG,CAACK,WAAJ;AAAiB,KAA9B;AACD,GAvDM,CAAP;AAwDD","names":["Observable","asyncMap","observable","mapFn","catchFn","observer","error","complete","activeCallbackCount","completed","promiseQueue","then","callback","Promise","makeCallback","examiner","delegate","both","arg","next","call","result","handler","catch","caught","sub","subscribe","unsubscribe"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\utilities\\observables\\asyncMap.ts"],"sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}