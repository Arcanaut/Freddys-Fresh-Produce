{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\n\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\nfunction processFragments(ast) {\n  var seenKeys = new Set();\n  var definitions = [];\n  ast.definitions.forEach(function (fragmentDefinition) {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n      var sourceKeySet = fragmentSourceMap.get(fragmentName);\n\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\" + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\" + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set());\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n  return __assign(__assign({}, ast), {\n    definitions: definitions\n  });\n}\n\nfunction stripLoc(doc) {\n  var workSet = new Set(doc.definitions);\n  workSet.forEach(function (node) {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(function (key) {\n      var value = node[key];\n\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n  var loc = doc.loc;\n\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source) {\n  var cacheKey = normalize(source);\n\n  if (!docCache.has(cacheKey)) {\n    var parsed = parse(source, {\n      experimentalFragmentVariables: experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables\n    });\n\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n\n    docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n  }\n\n  return docCache.get(cacheKey);\n}\n\nexport function gql(literals) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  var result = literals[0];\n  args.forEach(function (arg, i) {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n\n    result += literals[i + 1];\n  });\n  return parseDocument(result);\n}\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\nvar extras = {\n  gql: gql,\n  resetCaches: resetCaches,\n  disableFragmentWarnings: disableFragmentWarnings,\n  enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n\n(function (gql_1) {\n  gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\n\ngql[\"default\"] = gql;\nexport default gql;","map":{"version":3,"mappings":"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","names":["parse","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","cacheKeyFromLoc","loc","source","body","substring","start","end","processFragments","ast","seenKeys","Set","definitions","forEach","fragmentDefinition","kind","fragmentName","name","value","sourceKey","sourceKeySet","get","has","console","warn","set","add","push","stripLoc","doc","workSet","node","Object","keys","key","startToken","endToken","parseDocument","cacheKey","parsed","allowLegacyFragmentVariables","Error","gql","literals","args","result","arg","i","resetCaches","clear","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\graphql-tag\\src\\index.ts"],"sourcesContent":["import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n"]},"metadata":{},"sourceType":"module"}