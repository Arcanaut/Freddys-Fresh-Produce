{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useState } from 'react';\nimport { useQuery } from \"./useQuery.js\";\nvar EAGER_METHODS = ['refetch', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a = useState({\n    called: false\n  }),\n      execution = _a[0],\n      setExecution = _a[1];\n\n  var result = useQuery(query, __assign(__assign(__assign({}, options), execution.options), {\n    fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby',\n    skip: undefined\n  }));\n\n  if (!execution.called) {\n    result = __assign(__assign({}, result), {\n      loading: false,\n      data: void 0,\n      error: void 0,\n      called: false\n    });\n  }\n\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        setExecution(function (execution) {\n          return __assign(__assign({}, execution), {\n            called: true\n          });\n        });\n        return method.apply(void 0, args);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    setExecution({\n      called: true,\n      options: executeOptions\n    });\n    var promise = result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables).then(function (result1) {\n      var result2 = __assign(__assign({}, result), {\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false\n      });\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"mappings":";AAEA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,QAA+C,OAA/C;AAOA,SAASC,QAAT,QAAyB,eAAzB;AAKA,IAAMC,aAAa,GAAG,CACpB,SADoB,EAEpB,WAFoB,EAGpB,aAHoB,EAIpB,cAJoB,EAKpB,iBALoB,CAAtB;AAQA,OAAM,SAAUC,YAAV,CACJC,KADI,EAEJC,OAFI,EAE6C;AAE3C,WAA4BL,QAAQ,CAGvC;AACDM,UAAM,EAAE;AADP,GAHuC,CAApC;AAAA,MAACC,SAAS,QAAV;AAAA,MAAYC,YAAY,QAAxB;;AAON,MAAIC,MAAM,GAAGR,QAAQ,CAAoBG,KAApB,EAAyBM,+BACzCL,OADyC,GAEzCE,SAAS,CAACF,OAF+B,GAExB;AAGpBM,eAAW,EAAEJ,SAAS,CAACD,MAAV,GAAmBD,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEM,WAA5B,GAA0C,SAHnC;AAIpBC,QAAI,EAAEC;AAJc,GAFwB,CAAzB,CAArB;;AASA,MAAI,CAACN,SAAS,CAACD,MAAf,EAAuB;AACrBG,UAAM,yBACDA,MADC,GACK;AACTK,aAAO,EAAE,KADA;AAETC,UAAI,EAAE,KAAK,CAFF;AAGTC,WAAK,EAAE,KAAK,CAHH;AAITV,YAAM,EAAE;AAJC,KADL,CAAN;AAOD;;AAGD,MAAMW,YAAY,GAAGlB,OAAO,CAAC;AAC3B,QAAMkB,YAAY,GAAwB,EAA1C;;4BACWC,KAAG;AACZ,UAAMC,MAAM,GAAGV,MAAM,CAACS,GAAD,CAArB;;AACAD,kBAAY,CAACC,GAAD,CAAZ,GAAoB;AAAC;;aAAA,yCAAY;AAAZE;;;AACnBZ,oBAAY,CAAC,UAACD,SAAD,EAAU;AAAK,uCAAMA,SAAN,GAAe;AAAED,kBAAM,EAAE;AAAV,WAAf;AAAgC,SAAhD,CAAZ;AACA,eAAQa,MAAc,MAAd,CAAc,MAAd,EAAkBC,IAAlB,CAAR;AACD,OAHD;;;AAFF,SAAkB,2CAAlB,EAAkBC,2BAAlB,EAAkBA,IAAlB,EAA+B;AAA1B,UAAMH,GAAG,sBAAT;;cAAMA;AAMV;;AAED,WAAOD,YAAP;AACD,GAX2B,EAWzB,EAXyB,CAA5B;AAaAR,QAAM,CAACO,KAAP,GAAeP,MAAM,CAACO,KAAP,IAAgB,KAAK,CAApC;AACAM,QAAM,CAACC,MAAP,CAAcd,MAAd,EAAsBQ,YAAtB;AAEA,MAAMO,OAAO,GAAG1B,WAAW,CAEzB,UAAC2B,cAAD,EAA8C;AAC9CjB,gBAAY,CAAC;AAAEF,YAAM,EAAE,IAAV;AAAgBD,aAAO,EAAEoB;AAAzB,KAAD,CAAZ;AACA,QAAMC,OAAO,GAAGjB,MAAM,CAACkB,OAAP,CAAeF,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEG,SAA/B,EAA0CC,IAA1C,CAA+C,UAACC,OAAD,EAAQ;AACrE,UAAMC,OAAO,yBACRtB,MADQ,GACF;AACTM,YAAI,EAAEe,OAAO,CAACf,IADL;AAETC,aAAK,EAAEc,OAAO,CAACd,KAFN;AAGTV,cAAM,EAAE,IAHC;AAITQ,eAAO,EAAE;AAJA,OADE,CAAb;;AAQAQ,YAAM,CAACC,MAAP,CAAcQ,OAAd,EAAuBd,YAAvB;AACA,aAAOc,OAAP;AACD,KAXe,CAAhB;AAeAL,WAAO,CAACM,KAAR,CAAc,aAAQ,CAAtB;AAEA,WAAON,OAAP;AACD,GAtB0B,EAsBxB,EAtBwB,CAA3B;AAwBA,SAAO,CAACF,OAAD,EAAUf,MAAV,CAAP;AACD","names":["useCallback","useMemo","useState","useQuery","EAGER_METHODS","useLazyQuery","query","options","called","execution","setExecution","result","__assign","fetchPolicy","skip","undefined","loading","data","error","eagerMethods","key","method","args","_i","Object","assign","execute","executeOptions","promise","refetch","variables","then","result1","result2","catch"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\react\\hooks\\useLazyQuery.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<{\n    called: boolean,\n    options?: QueryLazyOptions<TVariables>,\n  }>({\n    called: false,\n  });\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We donâ€™t set skip to execution.called, because some useQuery SSR code\n    // checks skip for some reason.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      called: false,\n    };\n  }\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    setExecution({ called: true, options: executeOptions });\n    const promise = result.refetch(executeOptions?.variables).then((result1) => {\n      const result2 = {\n        ...result,\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false,\n      };\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"]},"metadata":{},"sourceType":"module"}