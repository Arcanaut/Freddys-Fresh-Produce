{"ast":null,"code":"import { InvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nexport function makeReference(id) {\n  return {\n    __ref: String(id)\n  };\n}\nexport function isReference(obj) {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\nexport function isDocumentNode(value) {\n  return isNonNullObject(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\n\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw __DEV__ ? new InvariantError(\"The inline argument \\\"\".concat(name.value, \"\\\" of kind \\\"\").concat(value.kind, \"\\\"\") + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.') : new InvariantError(52);\n  }\n}\nexport function storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n              value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n\n  var argObj = null;\n\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n  if (args && directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = args[key];\n      });\n      return \"\".concat(directives['connection']['key'], \"(\").concat(stringify(filteredArgs_1), \")\");\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  var completeFieldName = fieldName;\n\n  if (args) {\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\".concat(key, \"(\").concat(stringify(directives[key]), \")\");\n      } else {\n        completeFieldName += \"@\".concat(key);\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify: function (s) {\n    var previous = stringify;\n    stringify = s;\n    return previous;\n  }\n});\n\nvar stringify = function defaultStringify(value) {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key, value) {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce(function (copy, key) {\n      copy[key] = value[key];\n      return copy;\n    }, {});\n  }\n\n  return value;\n}\n\nexport function argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n\n  return null;\n}\nexport function resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n    var selection = _a[_i];\n\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\nexport function isField(selection) {\n  return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}","map":{"version":3,"mappings":"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","names":["InvariantError","isNonNullObject","getFragmentFromSelection","makeReference","id","__ref","String","isReference","obj","Boolean","isDocumentNode","value","kind","Array","isArray","definitions","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","variableValue","values","nestedArgArrayObj","listValue","__DEV__","concat","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","Object","assign","fieldName","args","filterKeys","sort","filteredArgs_1","key","stringify","completeFieldName","stringifiedArgs","keys","indexOf","setStringify","s","previous","defaultStringify","JSON","stringifyReplacer","_key","reduce","copy","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","getTypenameFromResult","result","selectionSet","fragmentMap","__typename","selections","_i","selection","isField","typename","isInlineFragment"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\utilities\\graphql\\storeUtils.ts"],"sourcesContent":["import { InvariantError } from '../globals';\n\nimport {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n} from 'graphql';\n\nimport { isNonNullObject } from '../common/objects';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport const getStoreKeyName = Object.assign(function (\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify(s: typeof stringify) {\n    const previous = stringify;\n    stringify = s;\n    return previous;\n  },\n});\n\n// Default stable JSON.stringify implementation. Can be updated/replaced with\n// something better by calling getStoreKeyName.setStringify.\nlet stringify = function defaultStringify(value: any): string {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key: string, value: any): any {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce((copy, key) => {\n      copy[key] = value[key];\n      return copy;\n    }, {} as Record<string, any>);\n  }\n  return value;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"]},"metadata":{},"sourceType":"module"}