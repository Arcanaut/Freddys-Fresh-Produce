{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { handleRef } from './utils'; // ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\n\nfunction isFiberRef(node) {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport var RefFindNode = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(RefFindNode, _React$Component);\n\n  function RefFindNode() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.prevNode = null;\n    return _this;\n  }\n\n  var _proto = RefFindNode.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n    delete this.prevNode;\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children;\n  };\n\n  return RefFindNode;\n}(React.Component);","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AAEA,SAASC,SAAT,QAAoC,SAApC,C,CAEA;AACA;AACA;;AASA;;;;;;;;AAOA,SAASC,UAAT,CAAoBC,IAApB,EAAkE;AAChE,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,KAAP;AACD;;AAED,MAAIA,IAAI,YAAYC,OAAhBD,IAA2BA,IAAI,YAAYE,IAA/C,EAAqD;AACnD,WAAO,KAAP;AACD;;AAED,SAAO,CAAC,EAAEF,IAAI,CAACG,IAALH,IAAaA,IAAI,CAACI,GAApB,CAAR;AACD;;AAED,WAAaC,WAAb;AAAAC;;AAAA;AAAA;;AAAA;AAAAC;AAAA;;AAAAC;AAAAA,UACEC,QADF,GAC0B,IAD1B;AAAA;AAAA;;AAAA;;AAAAC,SAGEC,iBAHF,GAGE,6BAAoB;AAClB,QAAIC,WAAW,GAAGf,QAAQ,CAACgB,WAAThB,CAAqB,IAArBA,CAAlB;;AAEA,QAAIiB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzC,UAAIf,UAAU,CAACa,WAAD,CAAd,EAA6B;AAC3BA,mBAAW,GAAG,IAAdA;AACD;AACF;;AAED,SAAKH,QAAL,GAAgBG,WAAhB;AACAd,aAAS,CAAC,KAAKmB,KAAL,CAAWC,QAAZ,EAAsBN,WAAtB,CAATd;AAbJ;;AAAAY,SAgBES,kBAhBF,GAgBE,4BAAmBC,SAAnB,EAAwC;AACtC,QAAIR,WAAW,GAAGf,QAAQ,CAACgB,WAAThB,CAAqB,IAArBA,CAAlB;;AAEA,QAAIiB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzC,UAAIf,UAAU,CAACa,WAAD,CAAd,EAA6B;AAC3BA,mBAAW,GAAG,IAAdA;AACD;AACF;;AAED,QAAI,KAAKH,QAAL,KAAkBG,WAAtB,EAAmC;AACjC,WAAKH,QAAL,GAAgBG,WAAhB;AACAd,eAAS,CAAC,KAAKmB,KAAL,CAAWC,QAAZ,EAAsBN,WAAtB,CAATd;AACD;;AAED,QAAIsB,SAAS,CAACF,QAAVE,KAAuB,KAAKH,KAAL,CAAWC,QAAtC,EAAgD;AAC9CpB,eAAS,CAAC,KAAKmB,KAAL,CAAWC,QAAZ,EAAsBN,WAAtB,CAATd;AACD;AAhCL;;AAAAY,SAmCEW,oBAnCF,GAmCE,gCAAuB;AACrBvB,aAAS,CAAC,KAAKmB,KAAL,CAAWC,QAAZ,EAAsB,IAAtB,CAATpB;AAEA,WAAO,KAAKW,QAAZ;AAtCJ;;AAAAC,SAyCEY,MAzCF,GAyCE,kBAAS;AAAA,QACCC,QADD,GACc,KAAKN,KAAL,CAAbM,QADD;AAGP,WAAOA,QAAP;AA5CJ;;AAAA;AAAA,EAAiC3B,KAAK,CAAC4B,SAAvC","names":["React","ReactDOM","handleRef","isFiberRef","node","Element","Text","type","tag","RefFindNode","_inheritsLoose","args","_this","prevNode","_proto","componentDidMount","currentNode","findDOMNode","process","env","NODE_ENV","props","innerRef","componentDidUpdate","prevProps","componentWillUnmount","render","children","Component"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@fluentui\\react-component-ref\\dist\\es\\RefFindNode.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\ntype Fiber = {\n  // Tag identifying the type of fiber.\n  tag: string;\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n};\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\nfunction isFiberRef(node: Element | Fiber | Text | null): boolean {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}