{"ast":null,"code":"import * as React from 'react';\nimport { canUseSymbol } from \"../../utilities/index.js\";\nvar contextKey = canUseSymbol ? Symbol.for('__APOLLO_CONTEXT__') : '__APOLLO_CONTEXT__';\nexport function getApolloContext() {\n  var context = React.createContext[contextKey];\n\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext({}),\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n    context.displayName = 'ApolloContext';\n  }\n\n  return context;\n}\nexport { getApolloContext as resetApolloContext };","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,YAAT,QAA6B,0BAA7B;AAYA,IAAMC,UAAU,GAAGD,YAAY,GAC3BE,MAAM,CAACC,GAAP,CAAW,oBAAX,CAD2B,GAE3B,oBAFJ;AAIA,OAAM,SAAUC,gBAAV,GAA0B;AAC9B,MAAIC,OAAO,GAAIN,KAAK,CAACO,aAAN,CAA4BL,UAA5B,CAAf;;AACA,MAAI,CAACI,OAAL,EAAc;AACZE,UAAM,CAACC,cAAP,CAAsBT,KAAK,CAACO,aAA5B,EAA2CL,UAA3C,EAAuD;AACrDQ,WAAK,EAAEJ,OAAO,GAAGN,KAAK,CAACO,aAAN,CAAwC,EAAxC,CADoC;AAErDI,gBAAU,EAAE,KAFyC;AAGrDC,cAAQ,EAAE,KAH2C;AAIrDC,kBAAY,EAAE;AAJuC,KAAvD;AAMAP,WAAO,CAACQ,WAAR,GAAsB,eAAtB;AACD;;AACD,SAAOR,OAAP;AACD;AAED,SAASD,gBAAgB,IAAIU,kBAA7B","names":["React","canUseSymbol","contextKey","Symbol","for","getApolloContext","context","createContext","Object","defineProperty","value","enumerable","writable","configurable","displayName","resetApolloContext"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\react\\context\\ApolloContext.ts"],"sourcesContent":["import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { RenderPromises } from '../ssr';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : '__APOLLO_CONTEXT__';\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  let context = (React.createContext as any)[contextKey] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext<ApolloContextValue>({}),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n"]},"metadata":{},"sourceType":"module"}