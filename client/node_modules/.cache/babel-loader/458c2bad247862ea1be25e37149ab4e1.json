{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod(name) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      var method = console[name] || console.log;\n      return method.apply(console, arguments);\n    }\n  };\n}\n\n(function (invariant) {\n  invariant.debug = wrapConsoleMethod(\"debug\");\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\n\nfunction setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nvar invariant$1 = invariant;\nexport { InvariantError, invariant$1 as default, invariant, setVerbosity };","map":{"version":3,"mappings":";AAAA,IAAMA,cAAc,GAAG,qBAAvB;AAEE,SAIEC,MAAa,eAJf;AAAA,kBAAc,mBAAG,UAAUC,GAAV,EAAoBC,KAApB,EAA8B;AAC7CD,KAAG,CAACE,SAAJ,GAAgBD,KAAhB;AACA,SAAOD,GAAP;AACD,CAHa,GAGbG,EAHD;;;;;AAMkCC;;AAGlC,0BAAYC,OAAZ,EAAqD;AAAzC;AAAAA;AAAyC;;AAArD,gBACEC,kBACE,OAAOD,OAAP,KAAmB,QAAnB,GACOP,cAAc,OAAd,GAAmBO,OAAnB,GAA0B,4DADjC,GAEIA,OAHN,KAIC,IALH;;AAFAE,wBAAc,CAAd;AACAA,iBAAOT,cAAP;AAOEU,kBAAc,CAACD,KAAD,EAAOE,cAAc,CAACC,SAAtB,CAAd;;AACD;;AACH;AAXA,EAAoCC;;SAapBC,UACdC,WACAR,SAAyB;AAEzB,MAAI,CAACQ,SAAL,EAAgB;AACd,UAAM,IAAIJ,cAAJ,CAAmBJ,OAAnB,CAAN;AACD;AACF;;AAED,IAAMS,eAAe,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,EAAyB,OAAzB,EAAkC,QAAlC,CAAxB;AAGA,IAAIC,cAAc,GAAGD,eAAe,CAACE,OAAhB,CAAwB,KAAxB,CAArB;;AAEA,SAASC,iBAAT,CAAwDC,IAAxD,EAA+D;AAC7D,SAAO;AACL,QAAIJ,eAAe,CAACE,OAAhB,CAAwBE,IAAxB,KAAiCH,cAArC,EAAqD;;;AAGnD,UAAMI,MAAM,GAAGC,OAAO,CAACF,IAAD,CAAP,IAAiBE,OAAO,CAACC,GAAxC;AACA,aAAOF,MAAM,CAACG,KAAP,CAAaF,OAAb,EAAsBG,SAAtB,CAAP;AACD;AACqB,GAPxB;AAQD;;AAED,WAAiBX,SAAjB,EAA0B;AACXA,oBAAQK,iBAAiB,CAAC,OAAD,CAAzB;AACAL,kBAAMK,iBAAiB,CAAC,KAAD,CAAvB;AACAL,mBAAOK,iBAAiB,CAAC,MAAD,CAAxB;AACAL,oBAAQK,iBAAiB,CAAC,OAAD,CAAzB;AACd,CALD,EAAiBL,SAAS,KAATA,SAAS,MAA1B;;SAOgBY,aAAaC,OAAqB;AAChD,MAAMC,GAAG,GAAGZ,eAAe,CAACC,cAAD,CAA3B;AACAA,gBAAc,GAAGY,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYd,eAAe,CAACE,OAAhB,CAAwBS,KAAxB,CAAZ,CAAjB;AACA,SAAOC,GAAP;AACD;;AAED,kBAAed,SAAf","names":["genericMessage","Object","obj","proto","__proto__","_a","__extends","message","_super","_this","setPrototypeOf","InvariantError","prototype","Error","invariant","condition","verbosityLevels","verbosityLevel","indexOf","wrapConsoleMethod","name","method","console","log","apply","arguments","setVerbosity","level","old","Math","max"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\ts-invariant\\src\\invariant.ts"],"sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}