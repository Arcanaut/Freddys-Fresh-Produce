{"ast":null,"code":"export function iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}","map":{"version":3,"mappings":"AAEA,OAAM,SAAUA,sBAAV,CACJC,SADI,EAEJC,MAFI,EAGJC,QAHI,EAGQ;AAKZ,MAAMC,mBAAmB,GAAkB,EAA3C;AACAH,WAAS,CAACI,OAAV,CAAkB,eAAG;AAAI,cAAG,CAACH,MAAD,CAAH,IAAeE,mBAAmB,CAACE,IAApB,CAAyBC,GAAzB,CAAf;AAA4C,GAArE;AACAH,qBAAmB,CAACC,OAApB,CAA4B,eAAG;AAAI,WAACE,GAAW,CAACL,MAAD,CAAX,CAAoBC,QAApB,CAAD;AAA8B,GAAjE;AACD","names":["iterateObserversSafely","observers","method","argument","observersWithMethod","forEach","push","obs"],"sources":["C:\\Users\\poohb\\Desktop\\group-project-3\\client\\node_modules\\@apollo\\src\\utilities\\observables\\iteration.ts"],"sourcesContent":["import { Observer } from \"./Observable\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n"]},"metadata":{},"sourceType":"module"}