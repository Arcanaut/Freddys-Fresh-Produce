{"version":3,"sources":["components/Footer/index.js","utils/auth.js","components/Header/index.js","components/MainPage/index.js","components/PostList/index.js","utils/mutations.js","pages/Login.js","pages/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","Date","getFullYear","decode","this","getToken","token","isTokenExpired","exp","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","to","Auth","loggedIn","href","onClick","event","preventDefault","logout","MainPage","paragraph","Image","src","PostList","Item","Group","size","Content","Meta","Description","content","header","meta","LOGIN_USER","gql","ADD_USER","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleChange","target","name","value","handleFormSubmit","a","variables","data","console","onSubmit","placeholder","type","id","onChange","Signup","username","addUser","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8d3ae45.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">\n        &copy;{new Date().getFullYear()} by Shelby, Travis, Bo & Brendan\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    // axios.defaults.headers.common[\"Authorization\"] = null;\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Auth from '../../utils/auth';\n\nconst Header = () => {\n  const logout = event => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <header>\n      <div>\n        <Link to=\"/\">\n          <h1>Explorer</h1>\n        </Link>\n\n        <nav className=\"text-center\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/signup\">Signup</Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\n\nconst MainPage = () => {\n  return (\n    <body className='main-page'>\n      <h1> Let's explore the world with us </h1>\n      <h2>\n        Please log-in first\n        <nav>\n          \n        </nav>\n\n      </h2>\n    </body>\n  );\n};\n\nexport default MainPage;\n","import React from 'react'\nimport { Image, Item } from 'semantic-ui-react'\n\nconst paragraph = <Image src='/images/wireframe/short-paragraph.png' />\n\nconst PostList = () => (\n  <Item.Group>\n    <Item>\n      <Item.Image size='tiny' src='/images/wireframe/image.png' />\n\n      <Item.Content>\n        <Item.Header>Arrowhead Valley Camp</Item.Header>\n        <Item.Meta>\n          <span className='price'>$1200</span>\n          <span className='stay'>1 Month</span>\n        </Item.Meta>\n        <Item.Description>{paragraph}</Item.Description>\n      </Item.Content>\n    </Item>\n\n    <Item>\n      <Item.Image size='tiny' src='/images/wireframe/image.png' />\n\n      <Item.Content>\n        <Item.Header>Buck's Homebrew Stayaway</Item.Header>\n        <Item.Meta content='$1000 2 Weeks' />\n        <Item.Description>{paragraph}</Item.Description>\n      </Item.Content>\n    </Item>\n\n    <Item>\n      <Item.Image size='tiny' src='/images/wireframe/image.png' />\n      <Item.Content header='Arrowhead Valley Camp' meta='$1200 1 Month' />\n    </Item>\n  </Item.Group>\n)\n\nexport default PostList;","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_POST = gql`\n  mutation addPost($postText: String!) {\n    addPost(postText: $postText) {\n      _id\n      postText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_REACTION = gql`\n  mutation addReaction($postId: ID!, $reactionBody: String!) {\n    addReaction(postId: $postId, reactionBody: $reactionBody) {\n      _id\n      reactionCount\n      reactions {\n        _id\n        reactionBody\n        createdAt\n        username\n      }\n    }\n  }\n`;\n\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Login</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Login failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Sign Up</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your username\"\n                name=\"username\"\n                type=\"username\"\n                id=\"username\"\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Signup failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react'\nimport './App.css';\nimport { BrowserRouter as Router,Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport MainPage from './components/MainPage';\nimport PostList from './components/PostList';\n\n\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        {/* <div className=\"flex-column justify-flex-start min-100-vh\"> */}\n          <Header />\n          <MainPage></MainPage>\n          {/* <ItemExampleLink></ItemExampleLink> */}\n          <div className=\"container\">\n            <Switch>\n              {/* <Route exact path=\"/\" component={Home} /> */}\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/postlist\" component={PostList} />\n              {/* <Route exact path=\"/profile/:username?\" component={Profile} />\n              <Route exact path=\"/post/:id\" component={SinglePost} />\n\n              <Route component={NoMatch} /> */}\n            </Switch>\n          </div>\n          <Footer />\n        {/* </div> */}\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}